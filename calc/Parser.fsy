%{
open Utils
open Ast

%}

%token NEWLINE
%token <int> INT
%token <float> FLOAT
%token <bool> BOOL
%token <string> VAR
%token PLUS MINUS MUL DIV
%token EOF
%token ASSIGN PRINT SEMICOLON
%token IF ELSE
%token LT LE GT GE EQ NE AND OR
%token LPAREN RPAREN LCBRACE RCBRACE

%left OR
%left AND
%left EQ NE
%left LT LE GT GE
%left PLUS MINUS
%left MUL DIV

%start input stmt expr
%type <Stmt list> input
%type <Stmt> stmt
%type <Stmt list> block_stmt
%type <Expr> expr

%%

input:
	| /* empty */	{ [] }
	| input stmt	{ $1 @ [$2] }
	;

stmt:
	| open_stmt { $1 }
	| closed_stmt { $1 }
	;

open_stmt:
	| IF LPAREN expr RPAREN stmt	{ If ($3, $5) }
	| IF LPAREN expr RPAREN closed_stmt ELSE open_stmt	{ IfElse ($3, $5, $7) }
	| IF LPAREN expr RPAREN LCBRACE	block_stmt RCBRACE	{ IfBlock ($3, $6) }
	| IF LPAREN expr RPAREN LCBRACE	block_stmt RCBRACE ELSE LCBRACE block_stmt RCBRACE { IfElseBlock ($3, $6, $10) }
	;

closed_stmt:
	| simple_stmt	{ $1 }
	| IF LPAREN expr RPAREN closed_stmt ELSE closed_stmt { IfElse ($3, $5, $7) }
	;

block_stmt:
	| /* empty */		{ [] }
	| block_stmt stmt	{ $1 @ [$2] }

simple_stmt:
	| PRINT expr SEMICOLON			{ Print $2 }
	| VAR ASSIGN expr SEMICOLON		{ Assign ($1, $3) }
	| expr SEMICOLON				{ ExprStmt $1 }
	| expr							{ failwith "Missing semicolon at the end of statement" }
	;

expr:
	| VAR					{ Var $1 }
	| BOOL					{ Bool $1 }
	| INT					{ Int $1 }
	| FLOAT					{ Float $1 }
	| expr PLUS expr		{ Binary(Plus, $1, $3) }
	| expr MINUS expr		{ Binary(Minus, $1, $3) }
	| expr MUL expr			{ Binary(Mul, $1, $3) }
	| expr DIV expr			{ Binary(Div, $1, $3) }
	| expr LT expr			{ Binary(Lt, $1, $3) }
	| expr LE expr			{ Binary(Le, $1, $3) }
	| expr GT expr			{ Binary(Gt, $1, $3) }
	| expr GE expr			{ Binary(Ge, $1, $3) }
	| expr EQ expr			{ Binary(Eq, $1, $3) }
	| expr NE expr			{ Binary(Ne, $1, $3) }
	| expr AND expr			{ Binary(And, $1, $3) }
	| expr OR expr			{ Binary(Or, $1, $3) }
	| LPAREN expr RPAREN	{ $2 }
	;

%%
