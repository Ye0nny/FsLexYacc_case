%{
open Utils
open Ast
%}

%token NEWLINE
%token <float> NUM
%token PLUS MINUS MUL DIV
%token EOF LPAREN RPAREN
%token ASSIGN
%token <string> VAR

%left PLUS MINUS
%left MUL DIV

%start input
%type <unit> input

%%

input:
	| /* empty */	{ }
	| input stmt	{ }
	;


stmt:
	| NEWLINE		{ }
	| expr ASSIGN expr		{ Assign ($1, $3) |> stmtEval }
	| expr EOF		{ exprEval $1 }
	;

expr:
	| VAR					{ Var $1 }
	| NUM					{ Num $1 }
	| expr PLUS expr		{ Plus ($1, $3) }
	| expr MINUS expr		{ Minus ($1, $3) }
	| expr MUL expr			{ Mul ($1, $3) }
	| expr DIV expr			{ Div ($1, $3) }
	| LPAREN expr RPAREN	{ $2 }
	;

%%
