%{
open Utils
open Ast

%}

%token NEWLINE
%token <int> INT
%token <float> FLOAT
%token <bool> BOOL
%token PLUS MINUS MUL DIV
%token EOF LPAREN RPAREN
%token ASSIGN PRINT SEMICOLON
%token <string> VAR

%left PLUS MINUS
%left MUL DIV

%start input stmt expr
%type <Stmt list> input
%type <Stmt> stmt
%type <Expr> expr

%%

input:
	| /* empty */	{ [] }
	| input stmt	{ $1 @ [$2] }
	;

stmt:
	| PRINT expr SEMICOLON		{ Print $2 }
	| VAR ASSIGN expr SEMICOLON	{ Assign ($1, $3) }
	| expr SEMICOLON			{ ExprStmt $1 }
	| expr						{ failwith "Missing semicolon at the end of statement" }
	;

expr:
	| VAR					{ Var $1 }
	| BOOL					{ Bool $1 }
	| INT					{ Int $1 }
	| FLOAT					{ Float $1 }
	| expr PLUS expr		{ Binary(Plus, $1, $3) }
	| expr MINUS expr		{ Binary(Minus, $1, $3) }
	| expr MUL expr			{ Binary(Mul, $1, $3) }
	| expr DIV expr			{ Binary(Div, $1, $3) }
	| LPAREN expr RPAREN	{ $2 }
	;

%%
