{
open Parser
open Utils
}

let digit = ['0'-'9']
let chars = ['a'-'z' 'A'-'Z']
let whitespace = [' ' '\t']
let newline = ['\r' '\n']

rule token = parse
| whitespace			{ token lexbuf }
| newline				{ token lexbuf }
| ';'					{ SEMICOLON }
| "print"				{ PRINT }
| digit+				{ lexeme lexbuf |> float |> NUM }
//| digit+['.']?digit*	{ lexeme lexbuf |> float |> NUM }
| '.'digit+				{ lexeme lexbuf |> float |> NUM }
| ['-']?digit+			{ lexeme lexbuf |> float |> NUM }
| chars+digit*			{ lexeme lexbuf |> string |> VAR }
| '+'					{ PLUS }
| '-'					{ MINUS }
| '*'					{ MUL }
| '/'					{ DIV }
| '('					{ LPAREN }
| ')'					{ RPAREN }
| '='					{ ASSIGN }
| eof					{ EOF }
| _						{ lexeme lexbuf |> sprintf "Parsing error: %s" |> failwith }
